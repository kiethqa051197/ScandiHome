'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ScandiHome_20221020_001")>  _
Partial Public Class AppDbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  Partial Private Sub InsertColor(instance As Color)
    End Sub
  Partial Private Sub UpdateColor(instance As Color)
    End Sub
  Partial Private Sub DeleteColor(instance As Color)
    End Sub
  Partial Private Sub InsertLinkFile(instance As LinkFile)
    End Sub
  Partial Private Sub UpdateLinkFile(instance As LinkFile)
    End Sub
  Partial Private Sub DeleteLinkFile(instance As LinkFile)
    End Sub
  Partial Private Sub InsertMaterial(instance As Material)
    End Sub
  Partial Private Sub UpdateMaterial(instance As Material)
    End Sub
  Partial Private Sub DeleteMaterial(instance As Material)
    End Sub
  Partial Private Sub InsertModelSKU(instance As ModelSKU)
    End Sub
  Partial Private Sub UpdateModelSKU(instance As ModelSKU)
    End Sub
  Partial Private Sub DeleteModelSKU(instance As ModelSKU)
    End Sub
  Partial Private Sub InsertPrice(instance As Price)
    End Sub
  Partial Private Sub UpdatePrice(instance As Price)
    End Sub
  Partial Private Sub DeletePrice(instance As Price)
    End Sub
  Partial Private Sub InsertPriceQuota(instance As PriceQuota)
    End Sub
  Partial Private Sub UpdatePriceQuota(instance As PriceQuota)
    End Sub
  Partial Private Sub DeletePriceQuota(instance As PriceQuota)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertProductCat(instance As ProductCat)
    End Sub
  Partial Private Sub UpdateProductCat(instance As ProductCat)
    End Sub
  Partial Private Sub DeleteProductCat(instance As ProductCat)
    End Sub
  Partial Private Sub InsertProductColor(instance As ProductColor)
    End Sub
  Partial Private Sub UpdateProductColor(instance As ProductColor)
    End Sub
  Partial Private Sub DeleteProductColor(instance As ProductColor)
    End Sub
  Partial Private Sub InsertProductMaterial(instance As ProductMaterial)
    End Sub
  Partial Private Sub UpdateProductMaterial(instance As ProductMaterial)
    End Sub
  Partial Private Sub DeleteProductMaterial(instance As ProductMaterial)
    End Sub
  Partial Private Sub InsertProductProgress(instance As ProductProgress)
    End Sub
  Partial Private Sub UpdateProductProgress(instance As ProductProgress)
    End Sub
  Partial Private Sub DeleteProductProgress(instance As ProductProgress)
    End Sub
  Partial Private Sub InsertProductQuota(instance As ProductQuota)
    End Sub
  Partial Private Sub UpdateProductQuota(instance As ProductQuota)
    End Sub
  Partial Private Sub DeleteProductQuota(instance As ProductQuota)
    End Sub
  Partial Private Sub InsertQuota(instance As Quota)
    End Sub
  Partial Private Sub UpdateQuota(instance As Quota)
    End Sub
  Partial Private Sub DeleteQuota(instance As Quota)
    End Sub
  Partial Private Sub InsertQuotaDetail(instance As QuotaDetail)
    End Sub
  Partial Private Sub UpdateQuotaDetail(instance As QuotaDetail)
    End Sub
  Partial Private Sub DeleteQuotaDetail(instance As QuotaDetail)
    End Sub
  Partial Private Sub InsertSeries(instance As Series)
    End Sub
  Partial Private Sub UpdateSeries(instance As Series)
    End Sub
  Partial Private Sub DeleteSeries(instance As Series)
    End Sub
  Partial Private Sub InsertShippingFee(instance As ShippingFee)
    End Sub
  Partial Private Sub UpdateShippingFee(instance As ShippingFee)
    End Sub
  Partial Private Sub DeleteShippingFee(instance As ShippingFee)
    End Sub
  Partial Private Sub InsertRole(instance As Role)
    End Sub
  Partial Private Sub UpdateRole(instance As Role)
    End Sub
  Partial Private Sub DeleteRole(instance As Role)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertUserRole(instance As UserRole)
    End Sub
  Partial Private Sub UpdateUserRole(instance As UserRole)
    End Sub
  Partial Private Sub DeleteUserRole(instance As UserRole)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertOrderDetail(instance As OrderDetail)
    End Sub
  Partial Private Sub UpdateOrderDetail(instance As OrderDetail)
    End Sub
  Partial Private Sub DeleteOrderDetail(instance As OrderDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DBs.My.MySettings.Default.ScandiHome_20221020_001ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	Public ReadOnly Property Colors() As System.Data.Linq.Table(Of Color)
		Get
			Return Me.GetTable(Of Color)
		End Get
	End Property
	
	Public ReadOnly Property LinkFiles() As System.Data.Linq.Table(Of LinkFile)
		Get
			Return Me.GetTable(Of LinkFile)
		End Get
	End Property
	
	Public ReadOnly Property Materials() As System.Data.Linq.Table(Of Material)
		Get
			Return Me.GetTable(Of Material)
		End Get
	End Property
	
	Public ReadOnly Property ModelSKUs() As System.Data.Linq.Table(Of ModelSKU)
		Get
			Return Me.GetTable(Of ModelSKU)
		End Get
	End Property
	
	Public ReadOnly Property Prices() As System.Data.Linq.Table(Of Price)
		Get
			Return Me.GetTable(Of Price)
		End Get
	End Property
	
	Public ReadOnly Property PriceQuotas() As System.Data.Linq.Table(Of PriceQuota)
		Get
			Return Me.GetTable(Of PriceQuota)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property ProductCats() As System.Data.Linq.Table(Of ProductCat)
		Get
			Return Me.GetTable(Of ProductCat)
		End Get
	End Property
	
	Public ReadOnly Property ProductColors() As System.Data.Linq.Table(Of ProductColor)
		Get
			Return Me.GetTable(Of ProductColor)
		End Get
	End Property
	
	Public ReadOnly Property ProductMaterials() As System.Data.Linq.Table(Of ProductMaterial)
		Get
			Return Me.GetTable(Of ProductMaterial)
		End Get
	End Property
	
	Public ReadOnly Property ProductProgresses() As System.Data.Linq.Table(Of ProductProgress)
		Get
			Return Me.GetTable(Of ProductProgress)
		End Get
	End Property
	
	Public ReadOnly Property ProductQuotas() As System.Data.Linq.Table(Of ProductQuota)
		Get
			Return Me.GetTable(Of ProductQuota)
		End Get
	End Property
	
	Public ReadOnly Property Quotas() As System.Data.Linq.Table(Of Quota)
		Get
			Return Me.GetTable(Of Quota)
		End Get
	End Property
	
	Public ReadOnly Property QuotaDetails() As System.Data.Linq.Table(Of QuotaDetail)
		Get
			Return Me.GetTable(Of QuotaDetail)
		End Get
	End Property
	
	Public ReadOnly Property Series() As System.Data.Linq.Table(Of Series)
		Get
			Return Me.GetTable(Of Series)
		End Get
	End Property
	
	Public ReadOnly Property ShippingFees() As System.Data.Linq.Table(Of ShippingFee)
		Get
			Return Me.GetTable(Of ShippingFee)
		End Get
	End Property
	
	Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
		Get
			Return Me.GetTable(Of Role)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property UserRoles() As System.Data.Linq.Table(Of UserRole)
		Get
			Return Me.GetTable(Of UserRole)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetail)
		Get
			Return Me.GetTable(Of OrderDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Category")>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryCode As Decimal
	
	Private _CategoryName As String
	
	Private _Description As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _ModelSKUs As EntitySet(Of ModelSKU)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCategoryCodeChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ModelSKUs = New EntitySet(Of ModelSKU)(AddressOf Me.attach_ModelSKUs, AddressOf Me.detach_ModelSKUs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryCode", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryCode() As Decimal
		Get
			Return Me._CategoryCode
		End Get
		Set
			If ((Me._CategoryCode = value)  _
						= false) Then
				Me.OnCategoryCodeChanging(value)
				Me.SendPropertyChanging
				Me._CategoryCode = value
				Me.SendPropertyChanged("CategoryCode")
				Me.OnCategoryCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ModelSKU", Storage:="_ModelSKUs", ThisKey:="CategoryCode", OtherKey:="CategoryCode")>  _
	Public Property ModelSKUs() As EntitySet(Of ModelSKU)
		Get
			Return Me._ModelSKUs
		End Get
		Set
			Me._ModelSKUs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ModelSKUs(ByVal entity As ModelSKU)
		Me.SendPropertyChanging
		entity.Category = Me
	End Sub
	
	Private Sub detach_ModelSKUs(ByVal entity As ModelSKU)
		Me.SendPropertyChanging
		entity.Category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Color")>  _
Partial Public Class Color
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ColorCode As Decimal
	
	Private _ColorName As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _ProductColors As EntitySet(Of ProductColor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnColorCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnColorCodeChanged()
    End Sub
    Partial Private Sub OnColorNameChanging(value As String)
    End Sub
    Partial Private Sub OnColorNameChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductColors = New EntitySet(Of ProductColor)(AddressOf Me.attach_ProductColors, AddressOf Me.detach_ProductColors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorCode", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ColorCode() As Decimal
		Get
			Return Me._ColorCode
		End Get
		Set
			If ((Me._ColorCode = value)  _
						= false) Then
				Me.OnColorCodeChanging(value)
				Me.SendPropertyChanging
				Me._ColorCode = value
				Me.SendPropertyChanged("ColorCode")
				Me.OnColorCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ColorName() As String
		Get
			Return Me._ColorName
		End Get
		Set
			If (String.Equals(Me._ColorName, value) = false) Then
				Me.OnColorNameChanging(value)
				Me.SendPropertyChanging
				Me._ColorName = value
				Me.SendPropertyChanged("ColorName")
				Me.OnColorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_ProductColor", Storage:="_ProductColors", ThisKey:="ColorCode", OtherKey:="ColorCode")>  _
	Public Property ProductColors() As EntitySet(Of ProductColor)
		Get
			Return Me._ProductColors
		End Get
		Set
			Me._ProductColors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductColors(ByVal entity As ProductColor)
		Me.SendPropertyChanging
		entity.Color = Me
	End Sub
	
	Private Sub detach_ProductColors(ByVal entity As ProductColor)
		Me.SendPropertyChanging
		entity.Color = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LinkFile")>  _
Partial Public Class LinkFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _SKU As String
	
	Private _ReferalLink As String
	
	Private _SketchupFile As String
	
	Private _CNCFile As String
	
	Private _Guideline As String
	
	Private _WebsiteLink As String
	
	Private _ImageLink As String
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnReferalLinkChanging(value As String)
    End Sub
    Partial Private Sub OnReferalLinkChanged()
    End Sub
    Partial Private Sub OnSketchupFileChanging(value As String)
    End Sub
    Partial Private Sub OnSketchupFileChanged()
    End Sub
    Partial Private Sub OnCNCFileChanging(value As String)
    End Sub
    Partial Private Sub OnCNCFileChanged()
    End Sub
    Partial Private Sub OnGuidelineChanging(value As String)
    End Sub
    Partial Private Sub OnGuidelineChanged()
    End Sub
    Partial Private Sub OnWebsiteLinkChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteLinkChanged()
    End Sub
    Partial Private Sub OnImageLinkChanging(value As String)
    End Sub
    Partial Private Sub OnImageLinkChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferalLink", DbType:="NVarChar(MAX)")>  _
	Public Property ReferalLink() As String
		Get
			Return Me._ReferalLink
		End Get
		Set
			If (String.Equals(Me._ReferalLink, value) = false) Then
				Me.OnReferalLinkChanging(value)
				Me.SendPropertyChanging
				Me._ReferalLink = value
				Me.SendPropertyChanged("ReferalLink")
				Me.OnReferalLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SketchupFile", DbType:="NVarChar(MAX)")>  _
	Public Property SketchupFile() As String
		Get
			Return Me._SketchupFile
		End Get
		Set
			If (String.Equals(Me._SketchupFile, value) = false) Then
				Me.OnSketchupFileChanging(value)
				Me.SendPropertyChanging
				Me._SketchupFile = value
				Me.SendPropertyChanged("SketchupFile")
				Me.OnSketchupFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CNCFile", DbType:="NVarChar(MAX)")>  _
	Public Property CNCFile() As String
		Get
			Return Me._CNCFile
		End Get
		Set
			If (String.Equals(Me._CNCFile, value) = false) Then
				Me.OnCNCFileChanging(value)
				Me.SendPropertyChanging
				Me._CNCFile = value
				Me.SendPropertyChanged("CNCFile")
				Me.OnCNCFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Guideline", DbType:="NVarChar(MAX)")>  _
	Public Property Guideline() As String
		Get
			Return Me._Guideline
		End Get
		Set
			If (String.Equals(Me._Guideline, value) = false) Then
				Me.OnGuidelineChanging(value)
				Me.SendPropertyChanging
				Me._Guideline = value
				Me.SendPropertyChanged("Guideline")
				Me.OnGuidelineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebsiteLink", DbType:="NVarChar(MAX)")>  _
	Public Property WebsiteLink() As String
		Get
			Return Me._WebsiteLink
		End Get
		Set
			If (String.Equals(Me._WebsiteLink, value) = false) Then
				Me.OnWebsiteLinkChanging(value)
				Me.SendPropertyChanging
				Me._WebsiteLink = value
				Me.SendPropertyChanged("WebsiteLink")
				Me.OnWebsiteLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageLink", DbType:="NVarChar(MAX)")>  _
	Public Property ImageLink() As String
		Get
			Return Me._ImageLink
		End Get
		Set
			If (String.Equals(Me._ImageLink, value) = false) Then
				Me.OnImageLinkChanging(value)
				Me.SendPropertyChanging
				Me._ImageLink = value
				Me.SendPropertyChanged("ImageLink")
				Me.OnImageLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_LinkFile", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.LinkFiles.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LinkFiles.Add(Me)
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Material")>  _
Partial Public Class Material
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaterialCode As Decimal
	
	Private _MaterialName As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _ProductMaterials As EntitySet(Of ProductMaterial)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaterialCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMaterialCodeChanged()
    End Sub
    Partial Private Sub OnMaterialNameChanging(value As String)
    End Sub
    Partial Private Sub OnMaterialNameChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductMaterials = New EntitySet(Of ProductMaterial)(AddressOf Me.attach_ProductMaterials, AddressOf Me.detach_ProductMaterials)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialCode", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MaterialCode() As Decimal
		Get
			Return Me._MaterialCode
		End Get
		Set
			If ((Me._MaterialCode = value)  _
						= false) Then
				Me.OnMaterialCodeChanging(value)
				Me.SendPropertyChanging
				Me._MaterialCode = value
				Me.SendPropertyChanged("MaterialCode")
				Me.OnMaterialCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialName", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property MaterialName() As String
		Get
			Return Me._MaterialName
		End Get
		Set
			If (String.Equals(Me._MaterialName, value) = false) Then
				Me.OnMaterialNameChanging(value)
				Me.SendPropertyChanging
				Me._MaterialName = value
				Me.SendPropertyChanged("MaterialName")
				Me.OnMaterialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Material_ProductMaterial", Storage:="_ProductMaterials", ThisKey:="MaterialCode", OtherKey:="MaterialCode")>  _
	Public Property ProductMaterials() As EntitySet(Of ProductMaterial)
		Get
			Return Me._ProductMaterials
		End Get
		Set
			Me._ProductMaterials.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductMaterials(ByVal entity As ProductMaterial)
		Me.SendPropertyChanging
		entity.Material = Me
	End Sub
	
	Private Sub detach_ProductMaterials(ByVal entity As ProductMaterial)
		Me.SendPropertyChanging
		entity.Material = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ModelSKU")>  _
Partial Public Class ModelSKU
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ModelSKUCode As Decimal
	
	Private _ModelSKUName As String
	
	Private _DraftName As String
	
	Private _CategoryCode As Decimal
	
	Private _SeriesCode As System.Nullable(Of Decimal)
	
	Private _Width As System.Nullable(Of Double)
	
	Private _Depth As System.Nullable(Of Double)
	
	Private _Height As System.Nullable(Of Double)
	
	Private _Weight As System.Nullable(Of Double)
	
	Private _Products As EntitySet(Of Product)
	
	Private _Category As EntityRef(Of Category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModelSKUCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnModelSKUCodeChanged()
    End Sub
    Partial Private Sub OnModelSKUNameChanging(value As String)
    End Sub
    Partial Private Sub OnModelSKUNameChanged()
    End Sub
    Partial Private Sub OnDraftNameChanging(value As String)
    End Sub
    Partial Private Sub OnDraftNameChanged()
    End Sub
    Partial Private Sub OnCategoryCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCategoryCodeChanged()
    End Sub
    Partial Private Sub OnSeriesCodeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSeriesCodeChanged()
    End Sub
    Partial Private Sub OnWidthChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnWidthChanged()
    End Sub
    Partial Private Sub OnDepthChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDepthChanged()
    End Sub
    Partial Private Sub OnHeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Category = CType(Nothing, EntityRef(Of Category))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelSKUCode", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ModelSKUCode() As Decimal
		Get
			Return Me._ModelSKUCode
		End Get
		Set
			If ((Me._ModelSKUCode = value)  _
						= false) Then
				Me.OnModelSKUCodeChanging(value)
				Me.SendPropertyChanging
				Me._ModelSKUCode = value
				Me.SendPropertyChanged("ModelSKUCode")
				Me.OnModelSKUCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelSKUName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ModelSKUName() As String
		Get
			Return Me._ModelSKUName
		End Get
		Set
			If (String.Equals(Me._ModelSKUName, value) = false) Then
				Me.OnModelSKUNameChanging(value)
				Me.SendPropertyChanging
				Me._ModelSKUName = value
				Me.SendPropertyChanged("ModelSKUName")
				Me.OnModelSKUNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DraftName", DbType:="NVarChar(MAX)")>  _
	Public Property DraftName() As String
		Get
			Return Me._DraftName
		End Get
		Set
			If (String.Equals(Me._DraftName, value) = false) Then
				Me.OnDraftNameChanging(value)
				Me.SendPropertyChanging
				Me._DraftName = value
				Me.SendPropertyChanged("DraftName")
				Me.OnDraftNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryCode", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property CategoryCode() As Decimal
		Get
			Return Me._CategoryCode
		End Get
		Set
			If ((Me._CategoryCode = value)  _
						= false) Then
				If Me._Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryCodeChanging(value)
				Me.SendPropertyChanging
				Me._CategoryCode = value
				Me.SendPropertyChanged("CategoryCode")
				Me.OnCategoryCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeriesCode", DbType:="Decimal(18,0)")>  _
	Public Property SeriesCode() As System.Nullable(Of Decimal)
		Get
			Return Me._SeriesCode
		End Get
		Set
			If (Me._SeriesCode.Equals(value) = false) Then
				Me.OnSeriesCodeChanging(value)
				Me.SendPropertyChanging
				Me._SeriesCode = value
				Me.SendPropertyChanged("SeriesCode")
				Me.OnSeriesCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Width", DbType:="Float")>  _
	Public Property Width() As System.Nullable(Of Double)
		Get
			Return Me._Width
		End Get
		Set
			If (Me._Width.Equals(value) = false) Then
				Me.OnWidthChanging(value)
				Me.SendPropertyChanging
				Me._Width = value
				Me.SendPropertyChanged("Width")
				Me.OnWidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Depth", DbType:="Float")>  _
	Public Property Depth() As System.Nullable(Of Double)
		Get
			Return Me._Depth
		End Get
		Set
			If (Me._Depth.Equals(value) = false) Then
				Me.OnDepthChanging(value)
				Me.SendPropertyChanging
				Me._Depth = value
				Me.SendPropertyChanged("Depth")
				Me.OnDepthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Height", DbType:="Float")>  _
	Public Property Height() As System.Nullable(Of Double)
		Get
			Return Me._Height
		End Get
		Set
			If (Me._Height.Equals(value) = false) Then
				Me.OnHeightChanging(value)
				Me.SendPropertyChanging
				Me._Height = value
				Me.SendPropertyChanged("Height")
				Me.OnHeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Float")>  _
	Public Property Weight() As System.Nullable(Of Double)
		Get
			Return Me._Weight
		End Get
		Set
			If (Me._Weight.Equals(value) = false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ModelSKU_Product", Storage:="_Products", ThisKey:="ModelSKUCode", OtherKey:="ModelSKUCode")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ModelSKU", Storage:="_Category", ThisKey:="CategoryCode", OtherKey:="CategoryCode", IsForeignKey:=true)>  _
	Public Property Category() As Category
		Get
			Return Me._Category.Entity
		End Get
		Set
			Dim previousValue As Category = Me._Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Category.Entity = Nothing
					previousValue.ModelSKUs.Remove(Me)
				End If
				Me._Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ModelSKUs.Add(Me)
					Me._CategoryCode = value.CategoryCode
				Else
					Me._CategoryCode = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ModelSKU = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ModelSKU = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Price")>  _
Partial Public Class Price
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _SKU As String
	
	Private _Price As Double
	
	Private _StartDate As Date
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Double)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Float NOT NULL")>  _
	Public Property Price() As Double
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Price", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.Prices.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Prices.Add(Me)
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PriceQuota")>  _
Partial Public Class PriceQuota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _ProductCode As String
	
	Private _Price As Double
	
	Private _StartDate As Date
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _ProductQuota As EntityRef(Of ProductQuota)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Double)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductQuota = CType(Nothing, EntityRef(Of ProductQuota))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductCode() As String
		Get
			Return Me._ProductCode
		End Get
		Set
			If (String.Equals(Me._ProductCode, value) = false) Then
				If Me._ProductQuota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCode = value
				Me.SendPropertyChanged("ProductCode")
				Me.OnProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Float NOT NULL")>  _
	Public Property Price() As Double
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductQuota_PriceQuota", Storage:="_ProductQuota", ThisKey:="ProductCode", OtherKey:="ProductCode", IsForeignKey:=true)>  _
	Public Property ProductQuota() As ProductQuota
		Get
			Return Me._ProductQuota.Entity
		End Get
		Set
			Dim previousValue As ProductQuota = Me._ProductQuota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductQuota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductQuota.Entity = Nothing
					previousValue.PriceQuotas.Remove(Me)
				End If
				Me._ProductQuota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PriceQuotas.Add(Me)
					Me._ProductCode = value.ProductCode
				Else
					Me._ProductCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ProductQuota")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SKU As String
	
	Private _ProductCode As String
	
	Private _ProductCatCode As String
	
	Private _ModelSKUCode As Decimal
	
	Private _Description As String
	
	Private _Render As String
	
	Private _ShippingHCM As System.Nullable(Of Double)
	
	Private _ExpectedMargin As System.Nullable(Of Double)
	
	Private _Designer As String
	
	Private _DesignDate As System.Nullable(Of Date)
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _LinkFiles As EntitySet(Of LinkFile)
	
	Private _Prices As EntitySet(Of Price)
	
	Private _ProductColors As EntitySet(Of ProductColor)
	
	Private _ProductMaterials As EntitySet(Of ProductMaterial)
	
	Private _ProductProgress As EntityRef(Of ProductProgress)
	
	Private _Quotas As EntitySet(Of Quota)
	
	Private _OrderDetails As EntitySet(Of OrderDetail)
	
	Private _ModelSKU As EntityRef(Of ModelSKU)
	
	Private _ProductCat As EntityRef(Of ProductCat)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnProductCatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCatCodeChanged()
    End Sub
    Partial Private Sub OnModelSKUCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnModelSKUCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnRenderChanging(value As String)
    End Sub
    Partial Private Sub OnRenderChanged()
    End Sub
    Partial Private Sub OnShippingHCMChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnShippingHCMChanged()
    End Sub
    Partial Private Sub OnExpectedMarginChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnExpectedMarginChanged()
    End Sub
    Partial Private Sub OnDesignerChanging(value As String)
    End Sub
    Partial Private Sub OnDesignerChanged()
    End Sub
    Partial Private Sub OnDesignDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDesignDateChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LinkFiles = New EntitySet(Of LinkFile)(AddressOf Me.attach_LinkFiles, AddressOf Me.detach_LinkFiles)
		Me._Prices = New EntitySet(Of Price)(AddressOf Me.attach_Prices, AddressOf Me.detach_Prices)
		Me._ProductColors = New EntitySet(Of ProductColor)(AddressOf Me.attach_ProductColors, AddressOf Me.detach_ProductColors)
		Me._ProductMaterials = New EntitySet(Of ProductMaterial)(AddressOf Me.attach_ProductMaterials, AddressOf Me.detach_ProductMaterials)
		Me._ProductProgress = CType(Nothing, EntityRef(Of ProductProgress))
		Me._Quotas = New EntitySet(Of Quota)(AddressOf Me.attach_Quotas, AddressOf Me.detach_Quotas)
		Me._OrderDetails = New EntitySet(Of OrderDetail)(AddressOf Me.attach_OrderDetails, AddressOf Me.detach_OrderDetails)
		Me._ModelSKU = CType(Nothing, EntityRef(Of ModelSKU))
		Me._ProductCat = CType(Nothing, EntityRef(Of ProductCat))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50)")>  _
	Public Property ProductCode() As String
		Get
			Return Me._ProductCode
		End Get
		Set
			If (String.Equals(Me._ProductCode, value) = false) Then
				Me.OnProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCode = value
				Me.SendPropertyChanged("ProductCode")
				Me.OnProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCatCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductCatCode() As String
		Get
			Return Me._ProductCatCode
		End Get
		Set
			If (String.Equals(Me._ProductCatCode, value) = false) Then
				If Me._ProductCat.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductCatCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCatCode = value
				Me.SendPropertyChanged("ProductCatCode")
				Me.OnProductCatCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelSKUCode", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property ModelSKUCode() As Decimal
		Get
			Return Me._ModelSKUCode
		End Get
		Set
			If ((Me._ModelSKUCode = value)  _
						= false) Then
				If Me._ModelSKU.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnModelSKUCodeChanging(value)
				Me.SendPropertyChanging
				Me._ModelSKUCode = value
				Me.SendPropertyChanged("ModelSKUCode")
				Me.OnModelSKUCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Render", DbType:="NVarChar(MAX)")>  _
	Public Property Render() As String
		Get
			Return Me._Render
		End Get
		Set
			If (String.Equals(Me._Render, value) = false) Then
				Me.OnRenderChanging(value)
				Me.SendPropertyChanging
				Me._Render = value
				Me.SendPropertyChanged("Render")
				Me.OnRenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingHCM", DbType:="Float")>  _
	Public Property ShippingHCM() As System.Nullable(Of Double)
		Get
			Return Me._ShippingHCM
		End Get
		Set
			If (Me._ShippingHCM.Equals(value) = false) Then
				Me.OnShippingHCMChanging(value)
				Me.SendPropertyChanging
				Me._ShippingHCM = value
				Me.SendPropertyChanged("ShippingHCM")
				Me.OnShippingHCMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpectedMargin", DbType:="Float")>  _
	Public Property ExpectedMargin() As System.Nullable(Of Double)
		Get
			Return Me._ExpectedMargin
		End Get
		Set
			If (Me._ExpectedMargin.Equals(value) = false) Then
				Me.OnExpectedMarginChanging(value)
				Me.SendPropertyChanging
				Me._ExpectedMargin = value
				Me.SendPropertyChanged("ExpectedMargin")
				Me.OnExpectedMarginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Designer", DbType:="NVarChar(50)")>  _
	Public Property Designer() As String
		Get
			Return Me._Designer
		End Get
		Set
			If (String.Equals(Me._Designer, value) = false) Then
				Me.OnDesignerChanging(value)
				Me.SendPropertyChanging
				Me._Designer = value
				Me.SendPropertyChanged("Designer")
				Me.OnDesignerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesignDate", DbType:="DateTime")>  _
	Public Property DesignDate() As System.Nullable(Of Date)
		Get
			Return Me._DesignDate
		End Get
		Set
			If (Me._DesignDate.Equals(value) = false) Then
				Me.OnDesignDateChanging(value)
				Me.SendPropertyChanging
				Me._DesignDate = value
				Me.SendPropertyChanged("DesignDate")
				Me.OnDesignDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_LinkFile", Storage:="_LinkFiles", ThisKey:="SKU", OtherKey:="SKU")>  _
	Public Property LinkFiles() As EntitySet(Of LinkFile)
		Get
			Return Me._LinkFiles
		End Get
		Set
			Me._LinkFiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Price", Storage:="_Prices", ThisKey:="SKU", OtherKey:="SKU")>  _
	Public Property Prices() As EntitySet(Of Price)
		Get
			Return Me._Prices
		End Get
		Set
			Me._Prices.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductColor", Storage:="_ProductColors", ThisKey:="SKU", OtherKey:="SKU")>  _
	Public Property ProductColors() As EntitySet(Of ProductColor)
		Get
			Return Me._ProductColors
		End Get
		Set
			Me._ProductColors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductMaterial", Storage:="_ProductMaterials", ThisKey:="SKU", OtherKey:="SKU")>  _
	Public Property ProductMaterials() As EntitySet(Of ProductMaterial)
		Get
			Return Me._ProductMaterials
		End Get
		Set
			Me._ProductMaterials.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductProgress", Storage:="_ProductProgress", ThisKey:="SKU", OtherKey:="SKU", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ProductProgress() As ProductProgress
		Get
			Return Me._ProductProgress.Entity
		End Get
		Set
			Dim previousValue As ProductProgress = Me._ProductProgress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductProgress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductProgress.Entity = Nothing
					previousValue.Product = Nothing
				End If
				Me._ProductProgress.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Product = Me
				End If
				Me.SendPropertyChanged("ProductProgress")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Quota", Storage:="_Quotas", ThisKey:="SKU", OtherKey:="SKU")>  _
	Public Property Quotas() As EntitySet(Of Quota)
		Get
			Return Me._Quotas
		End Get
		Set
			Me._Quotas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_OrderDetail", Storage:="_OrderDetails", ThisKey:="SKU", OtherKey:="SKU")>  _
	Public Property OrderDetails() As EntitySet(Of OrderDetail)
		Get
			Return Me._OrderDetails
		End Get
		Set
			Me._OrderDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ModelSKU_Product", Storage:="_ModelSKU", ThisKey:="ModelSKUCode", OtherKey:="ModelSKUCode", IsForeignKey:=true)>  _
	Public Property ModelSKU() As ModelSKU
		Get
			Return Me._ModelSKU.Entity
		End Get
		Set
			Dim previousValue As ModelSKU = Me._ModelSKU.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ModelSKU.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ModelSKU.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._ModelSKU.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._ModelSKUCode = value.ModelSKUCode
				Else
					Me._ModelSKUCode = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("ModelSKU")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductCat_Product", Storage:="_ProductCat", ThisKey:="ProductCatCode", OtherKey:="ProductCatCode", IsForeignKey:=true)>  _
	Public Property ProductCat() As ProductCat
		Get
			Return Me._ProductCat.Entity
		End Get
		Set
			Dim previousValue As ProductCat = Me._ProductCat.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductCat.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductCat.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._ProductCat.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._ProductCatCode = value.ProductCatCode
				Else
					Me._ProductCatCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ProductCat")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LinkFiles(ByVal entity As LinkFile)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_LinkFiles(ByVal entity As LinkFile)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_Prices(ByVal entity As Price)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_Prices(ByVal entity As Price)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_ProductColors(ByVal entity As ProductColor)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_ProductColors(ByVal entity As ProductColor)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_ProductMaterials(ByVal entity As ProductMaterial)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_ProductMaterials(ByVal entity As ProductMaterial)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_Quotas(ByVal entity As Quota)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_Quotas(ByVal entity As Quota)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductCat")>  _
Partial Public Class ProductCat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductCatCode As String
	
	Private _ProductCatName As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _Products As EntitySet(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductCatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCatCodeChanged()
    End Sub
    Partial Private Sub OnProductCatNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductCatNameChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCatCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProductCatCode() As String
		Get
			Return Me._ProductCatCode
		End Get
		Set
			If (String.Equals(Me._ProductCatCode, value) = false) Then
				Me.OnProductCatCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCatCode = value
				Me.SendPropertyChanged("ProductCatCode")
				Me.OnProductCatCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCatName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductCatName() As String
		Get
			Return Me._ProductCatName
		End Get
		Set
			If (String.Equals(Me._ProductCatName, value) = false) Then
				Me.OnProductCatNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductCatName = value
				Me.SendPropertyChanged("ProductCatName")
				Me.OnProductCatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductCat_Product", Storage:="_Products", ThisKey:="ProductCatCode", OtherKey:="ProductCatCode")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductCat = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductCat = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductColor")>  _
Partial Public Class ProductColor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _SKU As String
	
	Private _ColorCode As Decimal
	
	Private _Color As EntityRef(Of Color)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnColorCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnColorCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Color = CType(Nothing, EntityRef(Of Color))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorCode", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property ColorCode() As Decimal
		Get
			Return Me._ColorCode
		End Get
		Set
			If ((Me._ColorCode = value)  _
						= false) Then
				If Me._Color.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnColorCodeChanging(value)
				Me.SendPropertyChanging
				Me._ColorCode = value
				Me.SendPropertyChanged("ColorCode")
				Me.OnColorCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_ProductColor", Storage:="_Color", ThisKey:="ColorCode", OtherKey:="ColorCode", IsForeignKey:=true)>  _
	Public Property Color() As Color
		Get
			Return Me._Color.Entity
		End Get
		Set
			Dim previousValue As Color = Me._Color.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Color.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Color.Entity = Nothing
					previousValue.ProductColors.Remove(Me)
				End If
				Me._Color.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductColors.Add(Me)
					Me._ColorCode = value.ColorCode
				Else
					Me._ColorCode = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Color")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductColor", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.ProductColors.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductColors.Add(Me)
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductMaterial")>  _
Partial Public Class ProductMaterial
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _SKU As String
	
	Private _MaterialCode As Decimal
	
	Private _Material As EntityRef(Of Material)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnMaterialCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMaterialCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Material = CType(Nothing, EntityRef(Of Material))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialCode", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property MaterialCode() As Decimal
		Get
			Return Me._MaterialCode
		End Get
		Set
			If ((Me._MaterialCode = value)  _
						= false) Then
				If Me._Material.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaterialCodeChanging(value)
				Me.SendPropertyChanging
				Me._MaterialCode = value
				Me.SendPropertyChanged("MaterialCode")
				Me.OnMaterialCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Material_ProductMaterial", Storage:="_Material", ThisKey:="MaterialCode", OtherKey:="MaterialCode", IsForeignKey:=true)>  _
	Public Property Material() As Material
		Get
			Return Me._Material.Entity
		End Get
		Set
			Dim previousValue As Material = Me._Material.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Material.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Material.Entity = Nothing
					previousValue.ProductMaterials.Remove(Me)
				End If
				Me._Material.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductMaterials.Add(Me)
					Me._MaterialCode = value.MaterialCode
				Else
					Me._MaterialCode = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Material")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductMaterial", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.ProductMaterials.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductMaterials.Add(Me)
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductProgress")>  _
Partial Public Class ProductProgress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SKU As String
	
	Private _TechnicalDesign As String
	
	Private _PriceCalculation As String
	
	Private _DesignQC As String
	
	Private _CNC As String
	
	Private _ImageBuilding As String
	
	Private _On_site As String
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnTechnicalDesignChanging(value As String)
    End Sub
    Partial Private Sub OnTechnicalDesignChanged()
    End Sub
    Partial Private Sub OnPriceCalculationChanging(value As String)
    End Sub
    Partial Private Sub OnPriceCalculationChanged()
    End Sub
    Partial Private Sub OnDesignQCChanging(value As String)
    End Sub
    Partial Private Sub OnDesignQCChanged()
    End Sub
    Partial Private Sub OnCNCChanging(value As String)
    End Sub
    Partial Private Sub OnCNCChanged()
    End Sub
    Partial Private Sub OnImageBuildingChanging(value As String)
    End Sub
    Partial Private Sub OnImageBuildingChanged()
    End Sub
    Partial Private Sub OnOn_siteChanging(value As String)
    End Sub
    Partial Private Sub OnOn_siteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TechnicalDesign", DbType:="NVarChar(50)")>  _
	Public Property TechnicalDesign() As String
		Get
			Return Me._TechnicalDesign
		End Get
		Set
			If (String.Equals(Me._TechnicalDesign, value) = false) Then
				Me.OnTechnicalDesignChanging(value)
				Me.SendPropertyChanging
				Me._TechnicalDesign = value
				Me.SendPropertyChanged("TechnicalDesign")
				Me.OnTechnicalDesignChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceCalculation", DbType:="NVarChar(50)")>  _
	Public Property PriceCalculation() As String
		Get
			Return Me._PriceCalculation
		End Get
		Set
			If (String.Equals(Me._PriceCalculation, value) = false) Then
				Me.OnPriceCalculationChanging(value)
				Me.SendPropertyChanging
				Me._PriceCalculation = value
				Me.SendPropertyChanged("PriceCalculation")
				Me.OnPriceCalculationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesignQC", DbType:="NVarChar(50)")>  _
	Public Property DesignQC() As String
		Get
			Return Me._DesignQC
		End Get
		Set
			If (String.Equals(Me._DesignQC, value) = false) Then
				Me.OnDesignQCChanging(value)
				Me.SendPropertyChanging
				Me._DesignQC = value
				Me.SendPropertyChanged("DesignQC")
				Me.OnDesignQCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CNC", DbType:="NVarChar(50)")>  _
	Public Property CNC() As String
		Get
			Return Me._CNC
		End Get
		Set
			If (String.Equals(Me._CNC, value) = false) Then
				Me.OnCNCChanging(value)
				Me.SendPropertyChanging
				Me._CNC = value
				Me.SendPropertyChanged("CNC")
				Me.OnCNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageBuilding", DbType:="NVarChar(50)")>  _
	Public Property ImageBuilding() As String
		Get
			Return Me._ImageBuilding
		End Get
		Set
			If (String.Equals(Me._ImageBuilding, value) = false) Then
				Me.OnImageBuildingChanging(value)
				Me.SendPropertyChanging
				Me._ImageBuilding = value
				Me.SendPropertyChanged("ImageBuilding")
				Me.OnImageBuildingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_On_site", DbType:="NVarChar(50)")>  _
	Public Property On_site() As String
		Get
			Return Me._On_site
		End Get
		Set
			If (String.Equals(Me._On_site, value) = false) Then
				Me.OnOn_siteChanging(value)
				Me.SendPropertyChanging
				Me._On_site = value
				Me.SendPropertyChanged("On_site")
				Me.OnOn_siteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductProgress", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.ProductProgress = Nothing
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductProgress = Me
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductQuota")>  _
Partial Public Class ProductQuota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductCode As String
	
	Private _ProductName As String
	
	Private _ProductCatCode As String
	
	Private _Description As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _PriceQuotas As EntitySet(Of PriceQuota)
	
	Private _QuotaDetails As EntitySet(Of QuotaDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnProductCatCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCatCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PriceQuotas = New EntitySet(Of PriceQuota)(AddressOf Me.attach_PriceQuotas, AddressOf Me.detach_PriceQuotas)
		Me._QuotaDetails = New EntitySet(Of QuotaDetail)(AddressOf Me.attach_QuotaDetails, AddressOf Me.detach_QuotaDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProductCode() As String
		Get
			Return Me._ProductCode
		End Get
		Set
			If (String.Equals(Me._ProductCode, value) = false) Then
				Me.OnProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCode = value
				Me.SendPropertyChanged("ProductCode")
				Me.OnProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCatCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductCatCode() As String
		Get
			Return Me._ProductCatCode
		End Get
		Set
			If (String.Equals(Me._ProductCatCode, value) = false) Then
				Me.OnProductCatCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCatCode = value
				Me.SendPropertyChanged("ProductCatCode")
				Me.OnProductCatCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductQuota_PriceQuota", Storage:="_PriceQuotas", ThisKey:="ProductCode", OtherKey:="ProductCode")>  _
	Public Property PriceQuotas() As EntitySet(Of PriceQuota)
		Get
			Return Me._PriceQuotas
		End Get
		Set
			Me._PriceQuotas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductQuota_QuotaDetail", Storage:="_QuotaDetails", ThisKey:="ProductCode", OtherKey:="ProductMaterialCode")>  _
	Public Property QuotaDetails() As EntitySet(Of QuotaDetail)
		Get
			Return Me._QuotaDetails
		End Get
		Set
			Me._QuotaDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PriceQuotas(ByVal entity As PriceQuota)
		Me.SendPropertyChanging
		entity.ProductQuota = Me
	End Sub
	
	Private Sub detach_PriceQuotas(ByVal entity As PriceQuota)
		Me.SendPropertyChanging
		entity.ProductQuota = Nothing
	End Sub
	
	Private Sub attach_QuotaDetails(ByVal entity As QuotaDetail)
		Me.SendPropertyChanging
		entity.ProductQuota = Me
	End Sub
	
	Private Sub detach_QuotaDetails(ByVal entity As QuotaDetail)
		Me.SendPropertyChanging
		entity.ProductQuota = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Quota")>  _
Partial Public Class Quota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _SKU As String
	
	Private _StartDate As Date
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _QuotaDetails As EntitySet(Of QuotaDetail)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuotaDetails = New EntitySet(Of QuotaDetail)(AddressOf Me.attach_QuotaDetails, AddressOf Me.detach_QuotaDetails)
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Quota_QuotaDetail", Storage:="_QuotaDetails", ThisKey:="Id", OtherKey:="QuotaId")>  _
	Public Property QuotaDetails() As EntitySet(Of QuotaDetail)
		Get
			Return Me._QuotaDetails
		End Get
		Set
			Me._QuotaDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Quota", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.Quotas.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Quotas.Add(Me)
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuotaDetails(ByVal entity As QuotaDetail)
		Me.SendPropertyChanging
		entity.Quota = Me
	End Sub
	
	Private Sub detach_QuotaDetails(ByVal entity As QuotaDetail)
		Me.SendPropertyChanging
		entity.Quota = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuotaDetail")>  _
Partial Public Class QuotaDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _QuotaId As Decimal
	
	Private _ProductMaterialCode As String
	
	Private _Quantity As Double
	
	Private _BP As System.Nullable(Of Boolean)
	
	Private _TP As System.Nullable(Of Boolean)
	
	Private _ProductQuota As EntityRef(Of ProductQuota)
	
	Private _Quota As EntityRef(Of Quota)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnQuotaIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnQuotaIdChanged()
    End Sub
    Partial Private Sub OnProductMaterialCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductMaterialCodeChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Double)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnBPChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnBPChanged()
    End Sub
    Partial Private Sub OnTPChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductQuota = CType(Nothing, EntityRef(Of ProductQuota))
		Me._Quota = CType(Nothing, EntityRef(Of Quota))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuotaId", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property QuotaId() As Decimal
		Get
			Return Me._QuotaId
		End Get
		Set
			If ((Me._QuotaId = value)  _
						= false) Then
				If Me._Quota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQuotaIdChanging(value)
				Me.SendPropertyChanging
				Me._QuotaId = value
				Me.SendPropertyChanged("QuotaId")
				Me.OnQuotaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductMaterialCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductMaterialCode() As String
		Get
			Return Me._ProductMaterialCode
		End Get
		Set
			If (String.Equals(Me._ProductMaterialCode, value) = false) Then
				If Me._ProductQuota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductMaterialCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductMaterialCode = value
				Me.SendPropertyChanged("ProductMaterialCode")
				Me.OnProductMaterialCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Float NOT NULL")>  _
	Public Property Quantity() As Double
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BP", DbType:="Bit")>  _
	Public Property BP() As System.Nullable(Of Boolean)
		Get
			Return Me._BP
		End Get
		Set
			If (Me._BP.Equals(value) = false) Then
				Me.OnBPChanging(value)
				Me.SendPropertyChanging
				Me._BP = value
				Me.SendPropertyChanged("BP")
				Me.OnBPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TP", DbType:="Bit")>  _
	Public Property TP() As System.Nullable(Of Boolean)
		Get
			Return Me._TP
		End Get
		Set
			If (Me._TP.Equals(value) = false) Then
				Me.OnTPChanging(value)
				Me.SendPropertyChanging
				Me._TP = value
				Me.SendPropertyChanged("TP")
				Me.OnTPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductQuota_QuotaDetail", Storage:="_ProductQuota", ThisKey:="ProductMaterialCode", OtherKey:="ProductCode", IsForeignKey:=true)>  _
	Public Property ProductQuota() As ProductQuota
		Get
			Return Me._ProductQuota.Entity
		End Get
		Set
			Dim previousValue As ProductQuota = Me._ProductQuota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductQuota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductQuota.Entity = Nothing
					previousValue.QuotaDetails.Remove(Me)
				End If
				Me._ProductQuota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuotaDetails.Add(Me)
					Me._ProductMaterialCode = value.ProductCode
				Else
					Me._ProductMaterialCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ProductQuota")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Quota_QuotaDetail", Storage:="_Quota", ThisKey:="QuotaId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Quota() As Quota
		Get
			Return Me._Quota.Entity
		End Get
		Set
			Dim previousValue As Quota = Me._Quota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Quota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Quota.Entity = Nothing
					previousValue.QuotaDetails.Remove(Me)
				End If
				Me._Quota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuotaDetails.Add(Me)
					Me._QuotaId = value.Id
				Else
					Me._QuotaId = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Quota")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Series")>  _
Partial Public Class Series
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SeriesCode As Decimal
	
	Private _SeriesName As String
	
	Private _SeriesReference As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSeriesCodeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSeriesCodeChanged()
    End Sub
    Partial Private Sub OnSeriesNameChanging(value As String)
    End Sub
    Partial Private Sub OnSeriesNameChanged()
    End Sub
    Partial Private Sub OnSeriesReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnSeriesReferenceChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeriesCode", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SeriesCode() As Decimal
		Get
			Return Me._SeriesCode
		End Get
		Set
			If ((Me._SeriesCode = value)  _
						= false) Then
				Me.OnSeriesCodeChanging(value)
				Me.SendPropertyChanging
				Me._SeriesCode = value
				Me.SendPropertyChanged("SeriesCode")
				Me.OnSeriesCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeriesName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SeriesName() As String
		Get
			Return Me._SeriesName
		End Get
		Set
			If (String.Equals(Me._SeriesName, value) = false) Then
				Me.OnSeriesNameChanging(value)
				Me.SendPropertyChanging
				Me._SeriesName = value
				Me.SendPropertyChanged("SeriesName")
				Me.OnSeriesNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeriesReference", DbType:="NVarChar(50)")>  _
	Public Property SeriesReference() As String
		Get
			Return Me._SeriesReference
		End Get
		Set
			If (String.Equals(Me._SeriesReference, value) = false) Then
				Me.OnSeriesReferenceChanging(value)
				Me.SendPropertyChanging
				Me._SeriesReference = value
				Me.SendPropertyChanged("SeriesReference")
				Me.OnSeriesReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ShippingFee")>  _
Partial Public Class ShippingFee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Decimal
	
	Private _Price As Double
	
	Private _Fee As Double
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Double)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnFeeChanging(value As Double)
    End Sub
    Partial Private Sub OnFeeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Decimal
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Float NOT NULL")>  _
	Public Property Price() As Double
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fee", DbType:="Float NOT NULL")>  _
	Public Property Fee() As Double
		Get
			Return Me._Fee
		End Get
		Set
			If ((Me._Fee = value)  _
						= false) Then
				Me.OnFeeChanging(value)
				Me.SendPropertyChanging
				Me._Fee = value
				Me.SendPropertyChanged("Fee")
				Me.OnFeeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Role")>  _
Partial Public Class Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name As String
	
	Private _UserRoles As EntitySet(Of UserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserRoles = New EntitySet(Of UserRole)(AddressOf Me.attach_UserRoles, AddressOf Me.detach_UserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_UserRole", Storage:="_UserRoles", ThisKey:="Id", OtherKey:="RoleId")>  _
	Public Property UserRoles() As EntitySet(Of UserRole)
		Get
			Return Me._UserRoles
		End Get
		Set
			Me._UserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserRoles(ByVal entity As UserRole)
		Me.SendPropertyChanging
		entity.Role = Me
	End Sub
	
	Private Sub detach_UserRoles(ByVal entity As UserRole)
		Me.SendPropertyChanging
		entity.Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserName As String
	
	Private _PasswordHash As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _LastLogin As System.Nullable(Of Date)
	
	Private _ComputerName As String
	
	Private _Enabled As Boolean
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _UserRoles As EntitySet(Of UserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnLastLoginChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLoginChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserRoles = New EntitySet(Of UserRole)(AddressOf Me.attach_UserRoles, AddressOf Me.detach_UserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="NVarChar(MAX)")>  _
	Public Property PasswordHash() As String
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (String.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(MAX)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(MAX)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLogin", DbType:="DateTime")>  _
	Public Property LastLogin() As System.Nullable(Of Date)
		Get
			Return Me._LastLogin
		End Get
		Set
			If (Me._LastLogin.Equals(value) = false) Then
				Me.OnLastLoginChanging(value)
				Me.SendPropertyChanging
				Me._LastLogin = value
				Me.SendPropertyChanged("LastLogin")
				Me.OnLastLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255)")>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserRole", Storage:="_UserRoles", ThisKey:="UserName", OtherKey:="UserId")>  _
	Public Property UserRoles() As EntitySet(Of UserRole)
		Get
			Return Me._UserRoles
		End Get
		Set
			Me._UserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserRoles(ByVal entity As UserRole)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_UserRoles(ByVal entity As UserRole)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserRole")>  _
Partial Public Class UserRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As String
	
	Private _RoleId As String
	
	Private _Role As EntityRef(Of Role)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As String)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Role = CType(Nothing, EntityRef(Of Role))
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RoleId() As String
		Get
			Return Me._RoleId
		End Get
		Set
			If (String.Equals(Me._RoleId, value) = false) Then
				If Me._Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_UserRole", Storage:="_Role", ThisKey:="RoleId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Role() As Role
		Get
			Return Me._Role.Entity
		End Get
		Set
			Dim previousValue As Role = Me._Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Role.Entity = Nothing
					previousValue.UserRoles.Remove(Me)
				End If
				Me._Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserRoles.Add(Me)
					Me._RoleId = value.Id
				Else
					Me._RoleId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserRole", Storage:="_User", ThisKey:="UserId", OtherKey:="UserName", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.UserRoles.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserRoles.Add(Me)
					Me._UserId = value.UserName
				Else
					Me._UserId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderCode As String
	
	Private _Phone As String
	
	Private _Description As String
	
	Private _ComputerName As String
	
	Private _CreatedBy As String
	
	Private _Created As Date
	
	Private _LastModifiedBy As String
	
	Private _LastModified As System.Nullable(Of Date)
	
	Private _OrderDetails As EntitySet(Of OrderDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOrderCodeChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastModifiedByChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderDetails = New EntitySet(Of OrderDetail)(AddressOf Me.attach_OrderDetails, AddressOf Me.detach_OrderDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OrderCode() As String
		Get
			Return Me._OrderCode
		End Get
		Set
			If (String.Equals(Me._OrderCode, value) = false) Then
				Me.OnOrderCodeChanging(value)
				Me.SendPropertyChanging
				Me._OrderCode = value
				Me.SendPropertyChanged("OrderCode")
				Me.OnOrderCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NChar(10)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(255)")>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Created", DbType:="DateTime NOT NULL")>  _
	Public Property Created() As Date
		Get
			Return Me._Created
		End Get
		Set
			If ((Me._Created = value)  _
						= false) Then
				Me.OnCreatedChanging(value)
				Me.SendPropertyChanging
				Me._Created = value
				Me.SendPropertyChanged("Created")
				Me.OnCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedBy", DbType:="VarChar(50)")>  _
	Public Property LastModifiedBy() As String
		Get
			Return Me._LastModifiedBy
		End Get
		Set
			If (String.Equals(Me._LastModifiedBy, value) = false) Then
				Me.OnLastModifiedByChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedBy = value
				Me.SendPropertyChanged("LastModifiedBy")
				Me.OnLastModifiedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime")>  _
	Public Property LastModified() As System.Nullable(Of Date)
		Get
			Return Me._LastModified
		End Get
		Set
			If (Me._LastModified.Equals(value) = false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderDetail", Storage:="_OrderDetails", ThisKey:="OrderCode", OtherKey:="OrderCode")>  _
	Public Property OrderDetails() As EntitySet(Of OrderDetail)
		Get
			Return Me._OrderDetails
		End Get
		Set
			Me._OrderDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_OrderDetails(ByVal entity As OrderDetail)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderDetail")>  _
Partial Public Class OrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderCode As String
	
	Private _OrderCodeItem As String
	
	Private _OrderType As String
	
	Private _Customer As String
	
	Private _Phone As String
	
	Private _Address As String
	
	Private _Region As String
	
	Private _DeliveryDate As System.Nullable(Of Date)
	
	Private _Manufacturing As String
	
	Private _Manufacturer As String
	
	Private _Description As String
	
	Private _DeliveryTime As String
	
	Private _DeliveryMethod As String
	
	Private _Staff As String
	
	Private _PaymentNote As String
	
	Private _SKU As String
	
	Private _Price As Double
	
	Private _Quantity As Double
	
	Private _CODAmountPaid As Double
	
	Private _CODAmount As Double
	
	Private _ReferenceOrder As String
	
	Private _ShippingFee As Double
	
	Private _Confirm As String
	
	Private _Design As String
	
	Private _Materials As String
	
	Private _Production As String
	
	Private _Delivery As String
	
	Private _Payment As String
	
	Private _Source As String
	
	Private _Order As EntityRef(Of [Order])
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderCodeChanging(value As String)
    End Sub
    Partial Private Sub OnOrderCodeChanged()
    End Sub
    Partial Private Sub OnOrderCodeItemChanging(value As String)
    End Sub
    Partial Private Sub OnOrderCodeItemChanged()
    End Sub
    Partial Private Sub OnOrderTypeChanging(value As String)
    End Sub
    Partial Private Sub OnOrderTypeChanged()
    End Sub
    Partial Private Sub OnCustomerChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnRegionChanging(value As String)
    End Sub
    Partial Private Sub OnRegionChanged()
    End Sub
    Partial Private Sub OnDeliveryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDeliveryDateChanged()
    End Sub
    Partial Private Sub OnManufacturingChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturingChanged()
    End Sub
    Partial Private Sub OnManufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnDeliveryTimeChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryTimeChanged()
    End Sub
    Partial Private Sub OnDeliveryMethodChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryMethodChanged()
    End Sub
    Partial Private Sub OnStaffChanging(value As String)
    End Sub
    Partial Private Sub OnStaffChanged()
    End Sub
    Partial Private Sub OnPaymentNoteChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentNoteChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Double)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Double)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnCODAmountPaidChanging(value As Double)
    End Sub
    Partial Private Sub OnCODAmountPaidChanged()
    End Sub
    Partial Private Sub OnCODAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnCODAmountChanged()
    End Sub
    Partial Private Sub OnReferenceOrderChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceOrderChanged()
    End Sub
    Partial Private Sub OnShippingFeeChanging(value As Double)
    End Sub
    Partial Private Sub OnShippingFeeChanged()
    End Sub
    Partial Private Sub OnConfirmChanging(value As String)
    End Sub
    Partial Private Sub OnConfirmChanged()
    End Sub
    Partial Private Sub OnDesignChanging(value As String)
    End Sub
    Partial Private Sub OnDesignChanged()
    End Sub
    Partial Private Sub OnMaterialsChanging(value As String)
    End Sub
    Partial Private Sub OnMaterialsChanged()
    End Sub
    Partial Private Sub OnProductionChanging(value As String)
    End Sub
    Partial Private Sub OnProductionChanged()
    End Sub
    Partial Private Sub OnDeliveryChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryChanged()
    End Sub
    Partial Private Sub OnPaymentChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As String)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OrderCode() As String
		Get
			Return Me._OrderCode
		End Get
		Set
			If (String.Equals(Me._OrderCode, value) = false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrderCodeChanging(value)
				Me.SendPropertyChanging
				Me._OrderCode = value
				Me.SendPropertyChanged("OrderCode")
				Me.OnOrderCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderCodeItem", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OrderCodeItem() As String
		Get
			Return Me._OrderCodeItem
		End Get
		Set
			If (String.Equals(Me._OrderCodeItem, value) = false) Then
				Me.OnOrderCodeItemChanging(value)
				Me.SendPropertyChanging
				Me._OrderCodeItem = value
				Me.SendPropertyChanged("OrderCodeItem")
				Me.OnOrderCodeItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OrderType() As String
		Get
			Return Me._OrderType
		End Get
		Set
			If (String.Equals(Me._OrderType, value) = false) Then
				Me.OnOrderTypeChanging(value)
				Me.SendPropertyChanging
				Me._OrderType = value
				Me.SendPropertyChanged("OrderType")
				Me.OnOrderTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Customer() As String
		Get
			Return Me._Customer
		End Get
		Set
			If (String.Equals(Me._Customer, value) = false) Then
				Me.OnCustomerChanging(value)
				Me.SendPropertyChanging
				Me._Customer = value
				Me.SendPropertyChanged("Customer")
				Me.OnCustomerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, value) = false) Then
				Me.OnRegionChanging(value)
				Me.SendPropertyChanging
				Me._Region = value
				Me.SendPropertyChanged("Region")
				Me.OnRegionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryDate", DbType:="DateTime")>  _
	Public Property DeliveryDate() As System.Nullable(Of Date)
		Get
			Return Me._DeliveryDate
		End Get
		Set
			If (Me._DeliveryDate.Equals(value) = false) Then
				Me.OnDeliveryDateChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryDate = value
				Me.SendPropertyChanged("DeliveryDate")
				Me.OnDeliveryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturing", DbType:="NVarChar(MAX)")>  _
	Public Property Manufacturing() As String
		Get
			Return Me._Manufacturing
		End Get
		Set
			If (String.Equals(Me._Manufacturing, value) = false) Then
				Me.OnManufacturingChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturing = value
				Me.SendPropertyChanged("Manufacturing")
				Me.OnManufacturingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturer", DbType:="NVarChar(MAX)")>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me.OnManufacturerChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturer = value
				Me.SendPropertyChanged("Manufacturer")
				Me.OnManufacturerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryTime", DbType:="NVarChar(MAX)")>  _
	Public Property DeliveryTime() As String
		Get
			Return Me._DeliveryTime
		End Get
		Set
			If (String.Equals(Me._DeliveryTime, value) = false) Then
				Me.OnDeliveryTimeChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryTime = value
				Me.SendPropertyChanged("DeliveryTime")
				Me.OnDeliveryTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryMethod", DbType:="NVarChar(MAX)")>  _
	Public Property DeliveryMethod() As String
		Get
			Return Me._DeliveryMethod
		End Get
		Set
			If (String.Equals(Me._DeliveryMethod, value) = false) Then
				Me.OnDeliveryMethodChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryMethod = value
				Me.SendPropertyChanged("DeliveryMethod")
				Me.OnDeliveryMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff", DbType:="NVarChar(255)")>  _
	Public Property Staff() As String
		Get
			Return Me._Staff
		End Get
		Set
			If (String.Equals(Me._Staff, value) = false) Then
				Me.OnStaffChanging(value)
				Me.SendPropertyChanging
				Me._Staff = value
				Me.SendPropertyChanged("Staff")
				Me.OnStaffChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentNote", DbType:="NVarChar(255)")>  _
	Public Property PaymentNote() As String
		Get
			Return Me._PaymentNote
		End Get
		Set
			If (String.Equals(Me._PaymentNote, value) = false) Then
				Me.OnPaymentNoteChanging(value)
				Me.SendPropertyChanging
				Me._PaymentNote = value
				Me.SendPropertyChanged("PaymentNote")
				Me.OnPaymentNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SKU() As String
		Get
			Return Me._SKU
		End Get
		Set
			If (String.Equals(Me._SKU, value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSKUChanging(value)
				Me.SendPropertyChanging
				Me._SKU = value
				Me.SendPropertyChanged("SKU")
				Me.OnSKUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Float NOT NULL")>  _
	Public Property Price() As Double
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Float NOT NULL")>  _
	Public Property Quantity() As Double
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODAmountPaid", DbType:="Float NOT NULL")>  _
	Public Property CODAmountPaid() As Double
		Get
			Return Me._CODAmountPaid
		End Get
		Set
			If ((Me._CODAmountPaid = value)  _
						= false) Then
				Me.OnCODAmountPaidChanging(value)
				Me.SendPropertyChanging
				Me._CODAmountPaid = value
				Me.SendPropertyChanged("CODAmountPaid")
				Me.OnCODAmountPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODAmount", DbType:="Float NOT NULL")>  _
	Public Property CODAmount() As Double
		Get
			Return Me._CODAmount
		End Get
		Set
			If ((Me._CODAmount = value)  _
						= false) Then
				Me.OnCODAmountChanging(value)
				Me.SendPropertyChanging
				Me._CODAmount = value
				Me.SendPropertyChanged("CODAmount")
				Me.OnCODAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenceOrder", DbType:="NVarChar(50)")>  _
	Public Property ReferenceOrder() As String
		Get
			Return Me._ReferenceOrder
		End Get
		Set
			If (String.Equals(Me._ReferenceOrder, value) = false) Then
				Me.OnReferenceOrderChanging(value)
				Me.SendPropertyChanging
				Me._ReferenceOrder = value
				Me.SendPropertyChanged("ReferenceOrder")
				Me.OnReferenceOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippingFee", DbType:="Float NOT NULL")>  _
	Public Property ShippingFee() As Double
		Get
			Return Me._ShippingFee
		End Get
		Set
			If ((Me._ShippingFee = value)  _
						= false) Then
				Me.OnShippingFeeChanging(value)
				Me.SendPropertyChanging
				Me._ShippingFee = value
				Me.SendPropertyChanged("ShippingFee")
				Me.OnShippingFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Confirm]", Storage:="_Confirm", DbType:="NVarChar(50)")>  _
	Public Property Confirm() As String
		Get
			Return Me._Confirm
		End Get
		Set
			If (String.Equals(Me._Confirm, value) = false) Then
				Me.OnConfirmChanging(value)
				Me.SendPropertyChanging
				Me._Confirm = value
				Me.SendPropertyChanged("Confirm")
				Me.OnConfirmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Design", DbType:="NVarChar(50)")>  _
	Public Property Design() As String
		Get
			Return Me._Design
		End Get
		Set
			If (String.Equals(Me._Design, value) = false) Then
				Me.OnDesignChanging(value)
				Me.SendPropertyChanging
				Me._Design = value
				Me.SendPropertyChanged("Design")
				Me.OnDesignChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Materials", DbType:="NVarChar(50)")>  _
	Public Property Materials() As String
		Get
			Return Me._Materials
		End Get
		Set
			If (String.Equals(Me._Materials, value) = false) Then
				Me.OnMaterialsChanging(value)
				Me.SendPropertyChanging
				Me._Materials = value
				Me.SendPropertyChanged("Materials")
				Me.OnMaterialsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Production", DbType:="NVarChar(50)")>  _
	Public Property Production() As String
		Get
			Return Me._Production
		End Get
		Set
			If (String.Equals(Me._Production, value) = false) Then
				Me.OnProductionChanging(value)
				Me.SendPropertyChanging
				Me._Production = value
				Me.SendPropertyChanged("Production")
				Me.OnProductionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Delivery", DbType:="NVarChar(50)")>  _
	Public Property Delivery() As String
		Get
			Return Me._Delivery
		End Get
		Set
			If (String.Equals(Me._Delivery, value) = false) Then
				Me.OnDeliveryChanging(value)
				Me.SendPropertyChanging
				Me._Delivery = value
				Me.SendPropertyChanged("Delivery")
				Me.OnDeliveryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Payment", DbType:="NVarChar(50)")>  _
	Public Property Payment() As String
		Get
			Return Me._Payment
		End Get
		Set
			If (String.Equals(Me._Payment, value) = false) Then
				Me.OnPaymentChanging(value)
				Me.SendPropertyChanging
				Me._Payment = value
				Me.SendPropertyChanged("Payment")
				Me.OnPaymentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="NVarChar(50)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderDetail", Storage:="_Order", ThisKey:="OrderCode", OtherKey:="OrderCode", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.OrderDetails.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDetails.Add(Me)
					Me._OrderCode = value.OrderCode
				Else
					Me._OrderCode = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_OrderDetail", Storage:="_Product", ThisKey:="SKU", OtherKey:="SKU", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.OrderDetails.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDetails.Add(Me)
					Me._SKU = value.SKU
				Else
					Me._SKU = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
